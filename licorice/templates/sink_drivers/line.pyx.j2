# __DRIVER_CODE__ imports

cdef extern from "semaphore.h":
  int sem_init(sem_t *sem, int pshared, unsigned int value)
  int sem_destroy(sem_t *sem)

cdef extern from "<alsa/asoundlib.h>" nogil:
  struct _snd_pcm:
    pass
  ctypedef _snd_pcm snd_pcm_t
  struct _snd_pcm_hw_params:
    pass 
  ctypedef _snd_pcm_hw_params snd_pcm_hw_params_t
  struct _snd_pcm_sw_params:
    pass 
  ctypedef _snd_pcm_sw_params snd_pcm_sw_params_t
  enum snd_pcm_format_t:
    SND_PCM_FORMAT_S16
  enum snd_pcm_access_t:
    SND_PCM_ACCESS_RW_INTERLEAVED
  ctypedef unsigned long snd_pcm_uframes_t
  ctypedef long snd_pcm_sframes_t
  snd_pcm_sframes_t snd_pcm_bytes_to_frames (snd_pcm_t *pcm, ssize_t bytes)
  const char * snd_strerror (int errnum)
  int snd_pcm_prepare(snd_pcm_t* pcm) 
  int snd_pcm_recover (snd_pcm_t *pcm, int err, int silent)

cdef extern from "lineUtilities.h" nogil:
  ctypedef struct pcm_values_t:
    const char *device
    int mode
    snd_pcm_access_t access
    snd_pcm_format_t format
    unsigned int channels
    int rate
    unsigned int buffer_time
    unsigned int period_time
    int periods
    snd_pcm_sframes_t buffer_size
    snd_pcm_sframes_t period_size
  int pcm_init_playback(snd_pcm_t **pHandle, snd_pcm_hw_params_t *hwparams, snd_pcm_sw_params_t *swparams, pcm_values_t *values)
  void pcm_close(snd_pcm_t *handle, int exitStatus)
  int pcm_write_buffer(snd_pcm_t *handle, uint8_t *ptr, int cptr)
  snd_pcm_sframes_t pcm_get_period_size_bytes(pcm_values_t *values)


# __DRIVER_CODE__ variables

LINE_BUFFER_PERIODS = 4
cdef snd_pcm_t *play_handle
cdef snd_pcm_hw_params_t *play_hwparams
cdef snd_pcm_sw_params_t *play_swparams
cdef {{out_dtype}} *pLineOutBuf
cdef {{out_dtype}} *pLineOutBufWrite
cdef {{out_dtype}} *pLineOutBufRead
cdef ssize_t linePeriodSizeBytes
cdef ssize_t linePeriodSizeSamples
cdef snd_pcm_uframes_t linePeriodSizeFrames
cdef ssize_t lineOutBufSizeBytes
cdef ssize_t lineOutBufSizeSamples
cdef long int lineSamplesWrapped
cdef pcm_values_t play_values

# __DRIVER_CODE__ setup

# initialize line out
play_values.device = "{{out_signal["args"]["pcm"]["device"]}}"
play_values.mode = {{out_signal["args"]["pcm"]["mode"]}}
play_values.access = {{out_signal["args"]["pcm"]["access"]}}
play_values.format = {{out_signal["args"]["pcm"]["format"]}}
play_values.channels = {{out_signal["args"]["pcm"]["channels"]}}
play_values.rate = {{out_signal["args"]["pcm"]["rate"]}}
play_values.buffer_time = {{out_signal["args"]["pcm"]["buffer_time"]}}
play_values.period_time = {{out_signal["args"]["pcm"]["period_time"]}}
play_values.periods = {{out_signal["args"]["pcm"]["periods"]}}

pcm_init_playback(&play_handle, play_hwparams, play_swparams, &play_values)
linePeriodSizeBytes = pcm_get_period_size_bytes(&play_values)
linePeriodSizeSamples = linePeriodSizeBytes // sizeof({{out_dtype}})
linePeriodSizeFrames = snd_pcm_bytes_to_frames(play_handle, linePeriodSizeBytes)
lineOutBufSizeBytes = LINE_BUFFER_PERIODS * linePeriodSizeBytes
lineOutBufSizeSamples = lineOutBufSizeBytes // sizeof({{out_dtype}})
pLineOutBuf = <{{out_dtype}} *>malloc(lineOutBufSizeBytes)
pLineOutBufWrite = pLineOutBuf
pLineOutBufRead = pLineOutBuf
lineBufferedPeriods = 0
snd_pcm_prepare(play_handle)

# __DRIVER_CODE__ write
  # TODO debug latency
  # printf("%d\n", pNumTicks[0])
  # fflush(stdout)

  lineSamplesWrapped = (pLineOutBufWrite - pLineOutBuf) + outBufLen - lineOutBufSizeSamples
  linePeriodsWritten = 0

  if (lineSamplesWrapped >= 0):
    memcpy(pLineOutBufWrite, outBuf, (outBufLen - lineSamplesWrapped) * sizeof({{out_dtype}}))
    memcpy(pLineOutBuf, outBuf + outBufLen - lineSamplesWrapped, lineSamplesWrapped * sizeof({{out_dtype}}))

    linePeriodsWritten = outBufLen // linePeriodSizeSamples
    lineBufferedPeriods += linePeriodsWritten 

    pLineOutBufWrite = pLineOutBuf + lineSamplesWrapped
  else:
    memcpy(pLineOutBufWrite, outBuf, outBufLen * sizeof({{out_dtype}}))
    linePeriodsWritten = outBufLen // linePeriodSizeSamples
    lineBufferedPeriods += linePeriodsWritten
    pLineOutBufWrite += outBufLen

  # TODO debug latency
  # print(linePeriodsWritten, flush=True)
  for i in range(linePeriodsWritten):
    if (pcm_write_buffer(play_handle, <uint8_t *>pLineOutBufRead, linePeriodSizeFrames) < 0):
      die("pcm_write_buffer failed.\n")

    # j = 0
    # printf("sink (num_ticks: linePeriodSizeFrames, outBufLen): %lu %d %d\n", pNumTicks[0], linePeriodSizeFrames, outBufLen)
    # while (j < 20):
    #   printf("%d ", (<int16_t *>pLineOutBufRead)[j])
    #   j += 1
    # printf("%d ", (<int16_t *>pLineOutBufRead)[linePeriodSizeFrames-1])
    # printf("\n")
    # fflush(stdout)

    pLineOutBufRead += linePeriodSizeSamples
    if (pLineOutBufRead >= pLineOutBuf + lineOutBufSizeSamples):
      pLineOutBufRead = pLineOutBuf


  linePeriodsWritten = 0


# __DRIVER_CODE__ exit_handler
  global pLineOutBuf, play_handle, exitStatus
  free(pLineOutBuf)
  pcm_close(play_handle, exitStatus)
