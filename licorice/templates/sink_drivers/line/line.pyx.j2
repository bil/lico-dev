from libc.stdio cimport printf
from libc.stdlib cimport malloc, free, EXIT_SUCCESS, EXIT_FAILURE
from libc.stdint cimport int8_t, uint8_t, int16_t, uint16_t, int32_t, uint32_t, int64_t, uint64_t
from posix.signal cimport sigset_t, sigfillset
from libc.string cimport memcpy
from libcpp cimport bool

from sink_drivers cimport sink_driver

cdef extern from "../utilityFunctions.h":
  void die(char *errorStr)

cdef extern from "<sched.h>":
    enum: SCHED_FIFO
    ctypedef struct cpu_set_t:
        pass
    void CPU_ZERO(cpu_set_t *set)
    void CPU_SET(int cpu, cpu_set_t *set)

cdef extern from "<sys/types.h>":
    ctypedef struct pthread_attr_t:
        pass

cdef extern from "<pthread.h>" nogil:
    struct sched_param:
        int sched_priority
    int pthread_create(pthread_t *thread, pthread_attr_t *attr, void *(*start_routine) (void *), void *arg)
    void pthread_exit(void *retval)
    int pthread_sigmask(int how, sigset_t *set, sigset_t *oldset)
    int pthread_join(pthread_t thread, void **retval)
    int pthread_setaffinity_np(pthread_t thread, size_t cpusetsize, cpu_set_t *cpuset)
    int pthread_setschedparam(pthread_t thread, int policy, sched_param *param)
    pthread_t pthread_self()

cdef extern from "<alsa/asoundlib.h>" nogil:
    struct _snd_pcm:
      pass
    ctypedef _snd_pcm snd_pcm_t
    struct _snd_pcm_hw_params:
      pass
    ctypedef _snd_pcm_hw_params snd_pcm_hw_params_t
    struct _snd_pcm_sw_params:
      pass
    ctypedef _snd_pcm_sw_params snd_pcm_sw_params_t
    ctypedef long snd_pcm_sframes_t
    snd_pcm_sframes_t snd_pcm_bytes_to_frames (snd_pcm_t *pcm, ssize_t bytes)
    int snd_pcm_prepare(snd_pcm_t* pcm)

cdef extern from "../lineUtilities.h" nogil:
    ctypedef struct pcm_values_t:
        const char *device
        int mode
        snd_pcm_access_t access
        snd_pcm_format_t format
        unsigned int channels
        int rate
        unsigned int buffer_time
        unsigned int period_time
        int periods
        snd_pcm_sframes_t buffer_size
        snd_pcm_sframes_t period_size
    int pcm_init_playback(snd_pcm_t **pHandle, snd_pcm_hw_params_t *hwparams, snd_pcm_sw_params_t *swparams, pcm_values_t *values)
    void pcm_close(snd_pcm_t *handle, int exitStatus)
    int pcm_write_buffer(snd_pcm_t *handle, uint8_t *ptr, int cptr)
    snd_pcm_sframes_t pcm_get_period_size_bytes(pcm_values_t *values)

DEF LINE_BUFFER_PERIODS = 4 # TODO figure out where constants live now

cdef class LineSinkDriver(sink_driver.SinkDriver):
    def __cinit__(self):
        # initialize line out
        self.play_values.device = "{{out_signal["args"]["pcm"]["device"]}}"
        self.play_values.mode = {{out_signal["args"]["pcm"]["mode"]}}
        self.play_values.access = {{out_signal["args"]["pcm"]["access"]}}
        self.play_values.format = {{out_signal["args"]["pcm"]["format"]}}
        self.play_values.channels = {{out_signal["args"]["pcm"]["channels"]}}
        self.play_values.rate = {{out_signal["args"]["pcm"]["rate"]}}
        self.play_values.buffer_time = {{out_signal["args"]["pcm"]["buffer_time"]}}
        self.play_values.period_time = {{out_signal["args"]["pcm"]["period_time"]}}
        self.play_values.periods = {{out_signal["args"]["pcm"]["periods"]}}

        pcm_init_playback(&self.play_handle, self.play_hwparams, self.play_swparams, &self.play_values)
        self.linePeriodSizeBytes = pcm_get_period_size_bytes(&self.play_values)
        self.linePeriodSizeSamples = self.linePeriodSizeBytes // sizeof({{out_dtype}})
        self.linePeriodSizeFrames = snd_pcm_bytes_to_frames(self.play_handle, self.linePeriodSizeBytes)
        self.lineOutBufSizeBytes = LINE_BUFFER_PERIODS * self.linePeriodSizeBytes
        self.lineOutBufSizeSamples = self.lineOutBufSizeBytes // sizeof({{out_dtype}})
        self.pLineOutBuf = <{{out_dtype}} *>malloc(self.lineOutBufSizeBytes)
        self.pLineOutBufWrite = self.pLineOutBuf
        self.pLineOutBufRead = self.pLineOutBuf
        self.lineBufferedPeriods = 0
        snd_pcm_prepare(self.play_handle)


    cdef void run(self, uint8_t *outBuf, size_t outBufLen, object in_sigs, object in_sig_lens) except *
        # TODO debug latency
        # TODO make pNumTicks accessible
        # printf("%d\n", pNumTicks[0])
        # fflush(stdout)

        self.lineSamplesWrapped = (self.pLineOutBufWrite - self.pLineOutBuf) + outBufLen - self.lineOutBufSizeSamples
        self.linePeriodsWritten = 0

        if (self.lineSamplesWrapped >= 0):
            memcpy(self.pLineOutBufWrite, outBuf, (outBufLen - self.lineSamplesWrapped) * sizeof({{out_dtype}}))
            memcpy(self.pLineOutBuf, outBuf + outBufLen - self.lineSamplesWrapped, self.lineSamplesWrapped * sizeof({{out_dtype}}))

            self.linePeriodsWritten = outBufLen // self.linePeriodSizeSamples
            self.lineBufferedPeriods += self.linePeriodsWritten

            self.pLineOutBufWrite = self.pLineOutBuf + self.lineSamplesWrapped
        else:
            memcpy(self.pLineOutBufWrite, outBuf, outBufLen * sizeof({{out_dtype}}))
            self.linePeriodsWritten = outBufLen // self.linePeriodSizeSamples
            self.lineBufferedPeriods += self.linePeriodsWritten
            self.pLineOutBufWrite += outBufLen

        # TODO debug latency
        # print(linePeriodsWritten, flush=True)
        for i in range(self.linePeriodsWritten):
            if (pcm_write_buffer(self.play_handle, <uint8_t *>self.pLineOutBufRead, self.linePeriodSizeFrames) < 0):
                die("pcm_write_buffer failed.\n")

            # j = 0
            # printf("sink (num_ticks: linePeriodSizeFrames, outBufLen): %lu %d %d\n", pNumTicks[0], linePeriodSizeFrames, outBufLen)
            # while (j < 20):
            #   printf("%d ", (<int16_t *>pLineOutBufRead)[j])
            #   j += 1
            # printf("%d ", (<int16_t *>pLineOutBufRead)[linePeriodSizeFrames-1])
            # printf("\n")
            # fflush(stdout)

        self.pLineOutBufRead += self.linePeriodSizeSamples
        if (self.pLineOutBufRead >= self.pLineOutBuf + self.lineOutBufSizeSamples):
            self.pLineOutBufRead = self.pLineOutBuf


        self.linePeriodsWritten = 0


    cdef void exit_handler(self, int exitStatus) except *:
        free(self.pLineOutBuf)
        pcm_close(self.play_handle, exitStatus)
