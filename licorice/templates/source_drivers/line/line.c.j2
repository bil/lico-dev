# imports

from .source_driver import SourceDriver

#include "<sys/types.h>"
#include "<sched.h>"
#include "<pthread.h>"
#include "<alsa/asoundlib.h>"
#include "lineUtilities.h"

#define LINE_BUFFER_PERIODS 100

cdef class LineSourceDriver(SourceDriver):
    cdef int NPERIODS = 2
    cdef snd_pcm_t *cap_handle
    cdef snd_pcm_hw_params_t *cap_hwparams
    cdef snd_pcm_sw_params_t *cap_swparams

    cdef int ret

    cdef uint8_t *outBuf
    cdef size_t outBufLen

    cdef uint8_t *pLineOutBuf
    cdef uint8_t *pLineOutBufWrite
    cdef uint8_t *pLineOutBufRead
    cdef ssize_t linePeriodSizeBytes
    cdef ssize_t lineBufferSizeBytes
    cdef snd_pcm_uframes_t lineBufferSizeFrames
    cdef snd_pcm_uframes_t linePeriodSizeFrames
    cdef ssize_t lineOutBufSize
    cdef long int lineBytesWrapped
    # threading variables
    cdef int rc
    cdef pthread_t tid
    cdef sem_t lineSem
    cdef bool shouldDie = False
    # worker thread vars
    cdef char *zErrMsg
    cdef void *retVal
    cdef uint32_t lineWriteOffset = 0
    cdef bool lineWrapped

    cdef void* processRequests(void *arg) nogil:
        global shouldDie, exitMask, ret, cap_handle, zErrMsg, pLineOutBuf, pLineOutBufWrite, lineSem, lineOutBufSize, lineBufferSizeFrames, lineBufferSizeBytes, NPERIODS
        pthread_sigmask(SIG_BLOCK, &exitMask, NULL)
        cdef snd_pcm_sframes_t pcm_ret
        cdef int *retVal
        zErrMsg = <char *>0
        cdef int i = 0

        while (True):
            if (shouldDie):
                retVal[0] = EXIT_SUCCESS
                pthread_exit(&retVal)

            # printf("write 1: %lu, %lu %lu\n", pLineOutBufWrite - pLineOutBuf, lineBufferSizeFrames, lineBufferSizeBytes)
            # fflush(stdout)
            pcm_ret = pcm_read_buffer(cap_handle, pLineOutBufWrite, lineBufferSizeFrames)

            if (pcm_ret < 0):
                printf("pcm_write_buffer failed.\n")
                retVal[0] = EXIT_FAILURE
                pthread_exit(&retVal)

            # i = 0
            # while (i < lineBufferSizeFrames):
            #   printf("%d ", (<int16_t *>pLineOutBufWrite)[i])
            #   i += 1
            # printf("\n")
            # fflush(stdout)

            pLineOutBufWrite += lineBufferSizeBytes
            if (pLineOutBufWrite >= pLineOutBuf + lineOutBufSize):
                pLineOutBufWrite = pLineOutBuf
            # printf("write 2: %lu\n", pLineOutBufWrite - pLineOutBuf)
            # fflush(stdout)

            i = 0
            while (i < NPERIODS):
                sem_post(&lineSem)
                i += 1

    def __init__(self):
        # initiliaze line in 
        snd_pcm_hw_params_alloca(&cap_hwparams)
        snd_pcm_sw_params_alloca(&cap_swparams)
        pcm_init_capture(&cap_handle, cap_hwparams, cap_swparams)
        sem_init(&lineSem, 0, 0)
        linePeriodSizeBytes = pcm_get_period_size_bytes()
        linePeriodSizeFrames = snd_pcm_bytes_to_frames(cap_handle, linePeriodSizeBytes)
        lineBufferSizeBytes = linePeriodSizeBytes * NPERIODS
        lineBufferSizeFrames = snd_pcm_bytes_to_frames(cap_handle, lineBufferSizeBytes)

        lineOutBufSize = LINE_BUFFER_PERIODS * lineBufferSizeBytes
        pLineOutBuf = <uint8_t *>malloc(lineOutBufSize)
        pLineOutBufWrite = pLineOutBuf
        pLineOutBufRead = pLineOutBuf
        lineBufferedPeriods = 0
        snd_pcm_prepare(cap_handle)

        rc = pthread_create(&tid, NULL, &processRequests, NULL)
        if (rc): die("pthread_create failed")

        cdef sched_param param
        param.sched_priority = 39
        pthread_setschedparam(tid, SCHED_FIFO, &param)
        cdef cpu_set_t mask
        CPU_ZERO(&mask)
        CPU_SET(2, &mask)
        pthread_setaffinity_np(tid, sizeof(cpu_set_t), &mask)

        {{sig}}BufVars[6] = recvLen // sizeof({{in_dtype}}) * 2
        {{sig}}BufVars[5] = recvLen // sizeof({{in_dtype}})
        {{sig}}BufVars[0] = 0

    
    def run_read(self):
        if (parentSetup):
            pass
            # pLineOutBufRead = pLineOutBufWrite


    def run_update():
        sem_wait(&lineSem)
        # print({{sig}}BufVars[7], flush=True)
        # print(bufCurPtr - bufStrtPtr, flush=True)
        # print(pLineOutBufRead - pLineOutBuf, flush=True)

        # print(linePeriodSizeBytes, flush=True)
        # print(lineOutBufSize, flush=True)
        memcpy(bufCurPtr, pLineOutBufRead, linePeriodSizeBytes)
        
        # print(flush=True)
        pLineOutBufRead += linePeriodSizeBytes

        if (pLineOutBufRead >= pLineOutBuf + lineOutBufSize):
            pLineOutBufRead = pLineOutBuf

        # print(pLineOutBufRead - pLineOutBuf, flush=True)

        {{sig}}BufVars[2] += linePeriodSizeFrames * 2 # TODO should be channel number
        {{sig}}BufVars[10] += 1
        if ({{sig}}BufVars[7] <= {{sig}}BufVars[2] + {{sig}}BufVars[6]):
            {{sig}}BufVars[4] = {{sig}}BufVars[2]
            {{sig}}BufVars[12] = {{sig}}BufVars[10]
        elif ({{sig}}BufVars[2] > {{sig}}BufVars[4]):
            {{sig}}BufVars[4] = {{sig}}BufVars[2] 
            {{sig}}BufVars[12] = {{sig}}BufVars[10]
        # Somehow when there is no active streaming data, this number just runs upwards
        {{sig}}BufVars[3] = linePeriodSizeFrames * 2 # TODO should be channel number
        {{sig}}BufVars[11] = 1
        # print({{sig}}BufVars[2], flush=True)
        # print({{sig}}BufVars[3], flush=True)
        # print(flush=True)


    def exit_handler(self):
        global shouldDie, retVal, tid
        
        shouldDie = True
        pthread_join(tid, &retVal)
        free(pLineOutBuf)
        sem_destroy(&lineSem)
        pcm_close(cap_handle, exitStatus)
