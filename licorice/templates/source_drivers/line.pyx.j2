# __DRIVER_CODE__ imports

from time import sleep

cdef extern from "<sys/types.h>":
  ctypedef int pthread_t
  ctypedef struct pthread_mutex_t:
    pass
  ctypedef struct pthread_mutexattr_t:
    pass
  ctypedef struct pthread_attr_t:
    pass

DEF SIG_BLOCK = 1

cdef extern from "<sched.h>":
  enum: SCHED_FIFO
  ctypedef struct cpu_set_t:
    pass
  void CPU_ZERO(cpu_set_t *set)
  void CPU_SET(int cpu, cpu_set_t *set)

cdef extern from "<pthread.h>" nogil:
  struct sched_param:
    int sched_priority
  int pthread_join(pthread_t, void **retValue)
  int pthread_mutex_init(pthread_mutex_t *, const pthread_mutexattr_t *)
  int pthread_mutex_lock(pthread_mutex_t *)
  int pthread_mutex_unlock(pthread_mutex_t *)
  int pthread_create(pthread_t *thread, const pthread_attr_t *attr, void *(*start_routine)(void*), void *arg)
  int pthread_setaffinity_np(pthread_t thread, size_t cpusetsize, cpu_set_t *cpuset)
  int pthread_setschedparam(pthread_t thread, int policy, sched_param *param)
  void pthread_exit(void *retval)
  int pthread_sigmask(int how, sigset_t *set, sigset_t *oldset)

cdef extern from "<alsa/asoundlib.h>":
  struct _snd_pcm:
    pass
  ctypedef _snd_pcm snd_pcm_t
  struct _snd_pcm_hw_params:
    pass
  ctypedef _snd_pcm_hw_params snd_pcm_hw_params_t
  struct _snd_pcm_sw_params:
    pass 
  enum snd_pcm_format_t:
    SND_PCM_FORMAT_S16
  enum snd_pcm_access_t:
    SND_PCM_ACCESS_RW_INTERLEAVED
  ctypedef _snd_pcm_sw_params snd_pcm_sw_params_t 
  ctypedef unsigned long snd_pcm_uframes_t
  ctypedef long snd_pcm_sframes_t
  snd_pcm_sframes_t snd_pcm_bytes_to_frames (snd_pcm_t *pcm, ssize_t bytes)
  const char * snd_strerror (int errnum)   
  int snd_pcm_prepare(snd_pcm_t* pcm) 
  int snd_pcm_drop(snd_pcm_t* pcm)
  int snd_pcm_recover (snd_pcm_t *pcm, int err, int silent)

cdef extern from "lineUtilities.h" nogil:
  ctypedef struct pcm_values_t:
    const char *device
    int mode
    snd_pcm_access_t access
    snd_pcm_format_t format
    unsigned int channels
    int rate
    unsigned int buffer_time
    unsigned int period_time
    int periods
    snd_pcm_sframes_t buffer_size
    snd_pcm_sframes_t period_size
  int pcm_init_capture(snd_pcm_t **pHandle, snd_pcm_hw_params_t *hwparams, snd_pcm_sw_params_t *swparams, pcm_values_t *values)
  void pcm_close(snd_pcm_t *handle, int exitStatus)
  int pcm_read_buffer(snd_pcm_t *handle, uint8_t *ptr, int cptr);
  snd_pcm_sframes_t pcm_get_period_size_bytes(pcm_values_t *values)


# __DRIVER_CODE__ variables

cdef snd_pcm_t *cap_handle
cdef snd_pcm_hw_params_t *cap_hwparams
cdef snd_pcm_sw_params_t *cap_swparams

cdef ssize_t linePeriodSizeBytes
cdef ssize_t linePeriodSizeSamples
cdef snd_pcm_uframes_t linePeriodSizeFrames
cdef ssize_t lineBufferSizeBytes
cdef ssize_t lineBufferSizeSamples
cdef snd_pcm_uframes_t lineBufferSizeFrames
cdef pcm_values_t cap_values


# __DRIVER_CODE__ setup

# initiliaze line in
cap_values.device = '{{in_signal["args"]["pcm"]["device"]}}'
cap_values.mode = {{in_signal["args"]["pcm"]["mode"]}}
cap_values.access = {{in_signal["args"]["pcm"]["access"]}}
cap_values.format = {{in_signal["args"]["pcm"]["format"]}}
cap_values.channels = {{in_signal["args"]["pcm"]["channels"]}}
cap_values.rate = {{in_signal["args"]["pcm"]["rate"]}}
cap_values.buffer_time = {{in_signal["args"]["pcm"]["buffer_time"]}}
cap_values.period_time = {{in_signal["args"]["pcm"]["period_time"]}}
cap_values.periods = {{in_signal["args"]["pcm"]["periods"]}}

pcm_init_capture(&cap_handle, cap_hwparams, cap_swparams, &cap_values)
linePeriodSizeBytes = pcm_get_period_size_bytes(&cap_values)
linePeriodSizeSamples = linePeriodSizeBytes // sizeof({{in_dtype}})
linePeriodSizeFrames = snd_pcm_bytes_to_frames(cap_handle, linePeriodSizeBytes)
lineBufferSizeBytes = linePeriodSizeBytes * cap_values.periods
lineBufferSizeSamples = lineBufferSizeBytes // sizeof({{in_dtype}})
lineBufferSizeFrames = snd_pcm_bytes_to_frames(cap_handle, lineBufferSizeBytes)

snd_pcm_prepare(cap_handle)
snd_pcm_drop(cap_handle);
snd_pcm_prepare(cap_handle);

# printf("dbg: %d %d %d\n", linePeriodSizeBytes, linePeriodSizeSamples, linePeriodSizeFrames)
{% for sig,args in (out_signals.items()) %}
# {{sig}}BufVars[5] = linePeriodSizeSamples
# {{sig}}BufVars[6] = {{sig}}BufVars[5] * 2
{% endfor %}

# half a tick
sleep_duration = {{config["config"]["tick_len"]}} / (2. * 1e6)
# full tick
# sleep_duration = sleep_duration * 2.

# __DRIVER_CODE__ read

  # printf("read (num_ticks, lineBufferSizeFrames, lineBufferSizeBytes): %ld, %lu, %lu\n",
  #   pNumTicks[0], lineBufferSizeFrames, lineBufferSizeBytes)
  # fflush(stdout)

  if (pcm_read_buffer(cap_handle, <uint8_t *>inBuf, linePeriodSizeFrames) < 0):
    die("pcm_read_buffer failed.\n")
  # memset(inBuf, pNumTicks[0], lineBufferSizeBytes)

{%- if async %}
  sleep(sleep_duration * 2)
{%- endif %}

  # i = 0
  # printf("source lineBufferSizeFrames: %d\n", lineBufferSizeFrames)
  # while (i < 20):
  #   printf("%d ", (<int16_t *>inBuf)[i])
  #   i += 1
  # printf("%d ", (<int16_t *>inBuf)[lineBufferSizeFrames - 1])
  # printf("\n")
  # fflush(stdout)

# __DRIVER_CODE__ exit_handler
  global cap_handle, exitStatus
  pcm_close(cap_handle, exitStatus)
