from libc.stdio cimport printf
from libc.stdlib cimport malloc, free, EXIT_SUCCESS, EXIT_FAILURE
from libc.stdint cimport int8_t, uint8_t, int16_t, uint16_t, int32_t, uint32_t, int64_t, uint64_t
from posix.signal cimport sigset_t, sigfillset
from libc.string cimport memcpy

from .source_driver cimport SourceDriver


cdef extern from "<alsa/asoundlib.h>":
  struct _snd_pcm:
    pass
  ctypedef _snd_pcm snd_pcm_t
  struct _snd_pcm_hw_params:
    pass
  ctypedef _snd_pcm_hw_params snd_pcm_hw_params_t
  struct _snd_pcm_sw_params:
    pass 
  ctypedef _snd_pcm_sw_params snd_pcm_sw_params_t 
  ctypedef unsigned long snd_pcm_uframes_t
  ctypedef long snd_pcm_sframes_t
  void snd_pcm_hw_params_alloca(void *ptr)
  void snd_pcm_sw_params_alloca(void *ptr)
  snd_pcm_sframes_t snd_pcm_bytes_to_frames (snd_pcm_t *pcm, ssize_t bytes)
  const char * snd_strerror (int errnum)   
  int snd_pcm_prepare(snd_pcm_t* pcm) 
  int snd_pcm_recover (snd_pcm_t *pcm, int err, int silent)

# TODO move lineUtilities? or come up with scheme to include utils for drivers
cdef extern from "lineUtilities.h" nogil:
  int pcm_init_capture(snd_pcm_t **pHandle, snd_pcm_hw_params_t *hwparams, snd_pcm_sw_params_t *swparams)
  void pcm_close(snd_pcm_t *handle, exitStatus)
  int pcm_read_buffer(snd_pcm_t *handle, uint8_t *ptr, int cptr);
  snd_pcm_sframes_t pcm_get_period_size_bytes()

# TODO add parent path to gcc lib or similar: https://stackoverflow.com/questions/15120330/include-parent-directorys-file
cdef extern from "../utilityFunctions.h":
  void die(char *errorStr)

DEF SIG_BLOCK = 1
DEF LINE_BUFFER_PERIODS = 100

cdef class LineSourceDriver(SourceDriver):
    def __init__(self, bufVars):
        self.NPERIODS = 2

        # initiliaze line in
        snd_pcm_hw_params_alloca(&self.cap_hwparams)
        snd_pcm_sw_params_alloca(&self.cap_swparams)
        pcm_init_capture(&self.cap_handle, self.cap_hwparams, self.cap_swparams)
        self.linePeriodSizeBytes = pcm_get_period_size_bytes()
        self.linePeriodSizeFrames = snd_pcm_bytes_to_frames(self.cap_handle, self.linePeriodSizeBytes)
        self.lineBufferSizeBytes = self.linePeriodSizeBytes * self.NPERIODS
        self.lineBufferSizeFrames = snd_pcm_bytes_to_frames(self.cap_handle, self.lineBufferSizeBytes)
        # TODO this should be the same as "packetSize"
        self.lineOutBufSize = LINE_BUFFER_PERIODS * self.lineBufferSizeBytes
        snd_pcm_prepare(self.cap_handle)


    cdef void run_read(self) except *:
        # printf("write 1: %lu, %lu %lu\n", pLineOutBufWrite - pLineOutBuf, lineBufferSizeFrames, lineBufferSizeBytes)
        # fflush(stdout)
        pcm_ret = pcm_read_buffer(cap_handle, <uint8_t *>bufCurPtr, lineBufferSizeFrames)

        if (pcm_ret < 0):
        die("pcm_write_buffer failed.\n")

        # i = 0
        # while (i < lineBufferSizeFrames):
        #   printf("%d ", (<int16_t *>bufCurPtr)[i])
        #   i += 1
        # printf("\n")
        # fflush(stdout)

    cdef void exit_handler(self, int exitStatus) except *:
        pcm_close(cap_handle, exitStatus)
