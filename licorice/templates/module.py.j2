{% block header %}
from libc.stdlib cimport atoi, exit
from libc.stdio cimport printf
from libc.string cimport strcpy, memset, memcpy
from libc.signal cimport SIGINT, SIGUSR1, SIGALRM, SIGBUS, SIGSEGV, SIGQUIT
from libc.stdint cimport int8_t, uint8_t, int16_t, uint16_t, int32_t, uint32_t, int64_t, uint64_t
from posix.signal cimport kill, sigaction, sigaction_t, sigset_t, sigemptyset, sigaddset, sigfillset
from posix.unistd cimport getppid, pause, close, getpid
from posix.mman cimport shm_open, mmap, munmap, PROT_READ, PROT_WRITE, MAP_SHARED, mlockall, MCL_CURRENT, MCL_FUTURE, munlockall, shm_unlink
from posix.types cimport pid_t
cimport posix.stat 
from posix.fcntl cimport O_RDWR, O_CREAT, O_TRUNC
from libcpp cimport bool
from posix.time cimport clock_gettime, CLOCK_MONOTONIC_RAW, timespec, nanosleep

import sys, signal
import SharedArray as sa
from cpython.exc cimport PyErr_CheckSignals
# import pygame as pygame
import random as random
import math
import numpy as np
import posix_ipc

cdef extern from "semaphore.h":
  enum: __SIZEOF_SEM_T
  cdef union sem_union:
    char __size[__SIZEOF_SEM_T]
    long int __align
  ctypedef sem_union sem_t
  int sem_init(sem_t *, int, unsigned)
  int sem_wait(sem_t *)
  int sem_getvalue(sem_t *restrict, int *restrict)
  int sem_post(sem_t *)
#not used yet, just seeing if it would work
cdef extern from "unistd.h":
  int getpagesize()
cdef extern from "stdatomic.h":
  enum memory_order:
    memory_order_relaxed,
    memory_order_consume,
    memory_order_acquire,
    memory_order_release,
    memory_order_acq_rel,
    memory_order_seq_cst
  void atomic_thread_fence(memory_order)

cdef extern from "utilityFunctions.h":
  void init_utils(void (*pHandleExit)(int exitStatus), sigset_t *pExitMask)
  void die(char *errorStr)
  void open_shared_mem(uint8_t **ppmem, const char *pName, int numBytes, int shm_flags, int mmap_flags)
  void set_sighandler(int signum, void *psh, sigset_t *block_mask)
  void make_realtime()

import numpy as np
cimport numpy as np
cimport cython

cdef extern from "constants.h":
  enum: NUM_PAGES_IN_GB
  enum: MAX_PATH_LEN
  enum: NUM_CHILDREN
  enum: BYTES_IN_GB
  cdef const char *SMEM0_PATHNAME
  enum: PAGESIZE
  enum: LATENCY
  enum: NUM_NON_SOURCES
  enum: NUM_SEM_SIGS
  enum: NUM_INTERNAL_SIGS
  size_t ROUND_UP(int X, int Y)
  enum: BUF_VARS_LEN

cdef pid_t pid
cdef pid_t ppid
cdef char pathName[MAX_PATH_LEN]
cdef public sigset_t exitMask
{% if name=='bufferer' %}
cdef timespec ts_pause
ts_pause.tv_nsec = 500
ts_pause.tv_sec = 0
{% endif %}

# shared memory vars
cdef size_t shm_size
{% if name=='bufferer' %}
cdef size_t mb_shm_size
{% endif %}
cdef uint8_t *pmem
cdef int64_t *pNumTicks
cdef sem_t *pTickUpSems
cdef sem_t *pTickDownSems
cdef sem_t *pSigSems
cdef uint32_t *pBufVars
{%- for sig, dtype in out_sig_types.items() %}
cdef uint32_t *{{sig}}BufVars
{% endfor %}
{%- for sig, dtype in in_sig_types.items() %}
cdef uint32_t *{{sig}}BufVars
{% endfor %}

{% endblock %}

{% block handlers %}

cdef void handle_exit(int exitStatus):
  global pmem, shm_size
  {{destruct_code}}
  munmap(pmem, shm_size)
  {% if name=='bufferer'%}
  shm_unlink("/mbmem0")
  {% endif %}
  munlockall()
  exit(exitStatus)

cdef void int_handler(int signum):
  pass

cdef void exit_handler(int signum):
  printf("EXIT HANDLER for {{name}}\n")
  handle_exit(0)

cdef void mem_error_handler(int signum):
  printf("Child memory error: signum %d\n", signum)
  printf("Child ID: %d\n", {{module_num}})
  handle_exit(1)

{%- endblock %}

{% block setup -%}

# runtime code
# intialize utilityFunctions
sigfillset(&exitMask)
init_utils(&handle_exit, &exitMask)
ppid = getppid()
pid = getpid()
printf("child %d id: %d\n", {{module_num}}, pid)

# open and map shared parent memory
shm_size = sizeof(uint64_t) + (sizeof(sem_t) * (1 + NUM_NON_SOURCES + NUM_SEM_SIGS)) + (sizeof(uint32_t) * BUF_VARS_LEN * NUM_INTERNAL_SIGS)
shm_size = ROUND_UP(shm_size, PAGESIZE)
open_shared_mem(&pmem, SMEM0_PATHNAME, shm_size, O_RDWR, PROT_READ | PROT_WRITE)
pNumTicks = <int64_t *>(pmem)
pTickUpSems = <sem_t *>(pmem + sizeof(uint64_t) + sizeof(sem_t))
pTickDownSems = <sem_t *>(pmem + sizeof(uint64_t) + sizeof(sem_t) + (NUM_NON_SOURCES * sizeof(sem_t)))
pSigSems = <sem_t *>(pmem + sizeof(uint64_t) + sizeof(sem_t) + (2 * NUM_NON_SOURCES * sizeof(sem_t)))
pBufVars = <uint32_t *>(pmem + sizeof(uint64_t) + sizeof(sem_t) + (2 * NUM_NON_SOURCES * sizeof(sem_t)) + NUM_SEM_SIGS * sizeof(sem_t))
{% if name == 'bufferer' %}
cdef uint8_t *bmem
mb_shm_size = {{in_signals.items()|length}} * sizeof(uint32_t) * {{history_pad_length+1}} + {{in_signals.items()|length}} * sizeof(uint8_t) * {{history_pad_length+1}} + sizeof(uint32_t) #[pointer hist(uint*[]), size hist(uint[]), the buffer position(uint[])]
open_shared_mem(&bmem, "/mbmem0", mb_shm_size,  O_TRUNC | O_CREAT | O_RDWR, PROT_READ | PROT_WRITE)
cdef int t=0
{% for sig,args in in_signals.items() %}
cdef uint32_t* p{{sig}}HistoryBuffer[{{history_pad_length+1}}]
cdef uint8_t* p{{sig}}SizeHistoryBuffer[{{history_pad_length+1}}]
for t from 0 <= t < {{history_pad_length+1}} by 1:
  p{{sig}}HistoryBuffer[t] = <uint32_t *> (bmem +{{history_pad_length+1}}*sizeof(uint32_t)*{{loop.index0}} + t*sizeof(uint32_t))
  p{{sig}}SizeHistoryBuffer[t] = <uint8_t *> (bmem + {{history_pad_length+1}}*sizeof(uint32_t)*{{in_signals.items()|length}} +{{history_pad_length+1}}*sizeof(uint8_t)*{{loop.index0}} + t*sizeof(uint8_t))
{% endfor %}
cdef uint32_t* pBufPos
pBufPos = <uint32_t *> (bmem + {{in_signals.items()|length}} * sizeof(uint32_t) * {{history_pad_length+1}} + {{in_signals.items()|length}} * sizeof(uint8_t) * {{history_pad_length+1}})
pBufPos[0] = 0
{% endif %}

{#This forces creation of processes one at a time, since otherwise we might get two definitions for the same shared mem #}
created_mem = sa.list()
in_sigs = {}
{% for sig,args in in_signals.items() %}
if any([b'{{sig}}' == x[0] for x in created_mem]):
  in_sigs["{{sig}}"] = sa.attach("shm://{{sig}}")
  {{sig}}Raw = in_sigs["{{sig}}"]
  {{sig}}BufVars = pBufVars + {{sig_nums[sig] * buf_vars_len}}
  {{sig}} = {{sig}}Raw[{{sig}}BufVars[8]]
else:
  print("{{sig}} not created")
  die("signal not created")
{%- endfor %}
out_sigs = {}
{% for sig, args in out_signals.items() %}
if any([b'{{sig}}' == x[0] for x in created_mem]):
  sa.delete("shm://{{sig}}")
  die("numpy signal {{sig}} already created")
else:
  out_sigs["{{sig}}"] = sa.create("shm://{{sig}}", {{args['sig_shape']}}, dtype=np.{{args['dtype']}})
  # make sure SharedArray==2.0.4 -> try to transfer to 3.0.0
  out_sigs["{{sig}}"].base.mlock()

  ################################################################################
  {% if non_real_time_parser -%}
  if "len" in "{{sig}}": 
    SA_PATH_LEN = "shm://io.{{sig}}"
  else:
    SA_PATH = "shm://io.{{sig}}"
    SEM_NAME = "/{{sig}}.sem"
  {%- endif %}
  ################################################################################

  {{sig}}Raw = out_sigs["{{sig}}"]
  {{sig}}BufVars = pBufVars + {{sig_nums[sig] * buf_vars_len}}
  {{sig}} = {{sig}}Raw[{{sig}}BufVars[8]]
  {{sig}}BufVars[7] = {{args['buf_tot_numel']}}
  {{sig}}BufVars[6] = {{ args['tick_numel']}}
  {{sig}}BufVars[5] = {{args['tick_numel']}}
{% endfor %}

###########################################
#attach to shared arrays
{% if non_real_time_parser -%}
raw_sig = sa.attach(SA_PATH)
#TODO: encode dtype with a variable
raw_sigStart = <uint8_t *><long>raw_sig.__array_interface__['data'][0]
raw_len = sa.attach(SA_PATH_LEN)
raw_lenStart = <uint8_t *><long>raw_len.__array_interface__['data'][0]
sem = posix_ipc.Semaphore(name = SEM_NAME)

{%- endif %}

###########################################

# set signal mask
sigfillset(&exitMask)
# handle signals
set_sighandler(SIGINT, &int_handler, &exitMask)
set_sighandler(SIGUSR1, &exit_handler, &exitMask)
set_sighandler(SIGBUS, &mem_error_handler, &exitMask)
set_sighandler(SIGSEGV, &mem_error_handler, &exitMask)

{% if default_params -%}
{{default_sig_name}} = {{default_params}}
{%- endif %}

{% if numba -%}

# Numba constructor
import {{numba_mod_name}}
{{numba_mod_name}}.{{numba_func_name}}({{numba_inst_inputs}})
{%- endif %}

{{construct_code}}

make_realtime()

kill(ppid,SIGUSR1)

{% if name=='bufferer'%}
cdef int prev_bv=-1
{% endif %}
while(True):
  sem_wait(&pTickUpSems[{{non_source_num}}])
  #clock_gettime(CLOCK_MONOTONIC_RAW, &ts)
  #printf("tick %lu, module {{name}} triggered at %f.\n", pNumTicks[0], ts.tv_nsec/1000000.)
{%for dep_on in depends_on %}
  sem_wait(&pSigSems[{{dep_on[1]}}])
{%endfor%}
#  clock_gettime(CLOCK_MONOTONIC_RAW, &ts)
#  printf("\ttick %lu, module {{name}} deps ready at %f.\n", pNumTicks[0], ts.tv_nsec/1000000.)
{% for sig,args in in_signals.items() %}
  {% if top_level %}
  # maybe don't do a divide in the future
  {{sig}} = {{sig}}Raw[{{sig}}BufVars[0]/{{in_signals[sig]['tick_numel']}}]
  
  {% else %}
  {{sig}} = {{sig}}Raw[{{sig}}BufVars[8]]
  {% endif %}
  {{sig}}Len = {{sig}}BufVars[1] - {{sig}}BufVars[0]
{% endfor %}
{% for sig,args in out_signals.items() %}
  {{sig}} = {{sig}}Raw[{{sig}}BufVars[10]]
{% endfor %}
{%- if numba %}
  {{numba_mod_name}}.{{numba_func_name}}({{numba_func_inputs}})
{% else %}
  {{user_code}}
  {%- if name == "bufferer" %}
#  sleeps = 0
  while (True):
    if (prev_bv!={{in_signals.keys()[0]}}BufVars[0]):
      {% for sig,args in in_signals.items() %}
      p{{sig}}HistoryBuffer[pBufPos[0]][0] = {{sig}}BufVars[0]
      p{{sig}}SizeHistoryBuffer[pBufPos[0]][0] = {{sig}}BufVars[0] - {{sig}}BufVars[1]
      {% endfor %}
      break;
    nanosleep(&ts_pause, NULL)

  prev_bv = {{in_signals.keys()[0]}}BufVars[0]

  pBufPos[0]+=1
  if (pBufPos[0] > {{history_pad_length}}):
    pBufPos[0] = 0
  {% endif %}
{%- endif %}

####################################################################
  {%- if non_real_time_parser%}
  try:
    sem.acquire(timeout = 0)
    #Determine the number of samples that need to be transferred over
    ind = len(raw_len) - 1
    for i in range(0, len(raw_len)):
      if raw_len[i] == 0:
        ind = i
        break


    if ind > 0:

      {% for sig,args in out_signals.items() %}
      #memcpy to licorice signal and update bufvars
      print({{sig}})
      if "len" in "{{sig}}":
        memcpy(<char *><long>{{sig}}.__array_interface__['data'][0], <char *>raw_lenStart, 2*ind*sizeof({{args['dtype']}}_t)) 
      else:
        memcpy(<char *><long>{{sig}}.__array_interface__['data'][0], <char *>raw_sigStart, 2*ind*1472*sizeof({{args['dtype']}}_t)) 

      #TODO: Do I need to also include sizeof and then the dtype
      {{sig}}BufVars[2] += 2*{{sig}}BufVars[5]*sizeof({{args['dtype']}}_t)
      {{sig}}BufVars[10] += 1
      if ({{sig}}BufVars[7] <= ({{sig}}BufVars[2] + {{sig}}BufVars[6])):
        {{sig}}BufVars[4] = {{sig}}BufVars[2]
        {{sig}}BufVars[12] = {{sig}}BufVars[10]
      elif ({{sig}}BufVars[2] > {{sig}}BufVars[4]):
        {{sig}}BufVars[4] = {{sig}}BufVars[2] 
        {{sig}}BufVars[12] = {{sig}}BufVars[10]
      {{sig}}BufVars[3] += 2*{{sig}}BufVars[5]*sizeof({{args['dtype']}}_t)
      {{sig}}BufVars[11] += 1

      {{sig}}BufVars[1] = {{sig}}BufVars[2]
      {{sig}}BufVars[9] = {{sig}}BufVars[10]
      {{sig}}BufVars[0] = {{sig}}BufVars[1] - {{sig}}BufVars[3]
      {{sig}}BufVars[8] = {{sig}}BufVars[9] - {{sig}}BufVars[11]
      if ({{sig}}BufVars[7] < ({{sig}}BufVars[2] + {{sig}}BufVars[6])):
        {{sig}}BufVars[2] = 0
        {{sig}}BufVars[10] = 0
      {{sig}}BufVars[3] = 0
      {{sig}}BufVars[11] = 0 
      {% endfor %}
      
      raw_len[:] = bytearray(len(raw_len))

    sem.release()
  except posix_ipc.BusyError:
    pass
  {%- endif %}


###################################################################

{%for dep_name, dep_val in dependencies.items() %}
  # printf("module 1 : %u %u %u %u %u %u %u %u  \n", {{dep_name}}BufVars[0], {{dep_name}}BufVars[1], {{dep_name}}BufVars[2], {{dep_name}}BufVars[3], {{dep_name}}BufVars[4], {{dep_name}}BufVars[5], {{dep_name}}BufVars[6], {{dep_name}}BufVars[7])
  {{dep_name}}BufVars[2] += {{dep_name}}BufVars[5]
  {{dep_name}}BufVars[10] += 1
  if ({{dep_name}}BufVars[7] <= ({{dep_name}}BufVars[2] + {{dep_name}}BufVars[6])):
    {{dep_name}}BufVars[4] = {{dep_name}}BufVars[2]
    {{dep_name}}BufVars[12] = {{dep_name}}BufVars[10]
  elif ({{dep_name}}BufVars[2] > {{dep_name}}BufVars[4]):
    {{dep_name}}BufVars[4] = {{dep_name}}BufVars[2] 
    {{dep_name}}BufVars[12] = {{dep_name}}BufVars[10]
  {{dep_name}}BufVars[3] += {{dep_name}}BufVars[5]
  {{dep_name}}BufVars[11] += 1
  # printf("module 2 : %u %u %u %u %u %u %u %u  \n", {{dep_name}}BufVars[0], {{dep_name}}BufVars[1], {{dep_name}}BufVars[2], {{dep_name}}BufVars[3], {{dep_name}}BufVars[4], {{dep_name}}BufVars[5], {{dep_name}}BufVars[6], {{dep_name}}BufVars[7])

  # update bufVars
  {{dep_name}}BufVars[1] = {{dep_name}}BufVars[2]
  {{dep_name}}BufVars[9] = {{dep_name}}BufVars[10]
  {{dep_name}}BufVars[0] = {{dep_name}}BufVars[1] - {{dep_name}}BufVars[3]
  {{dep_name}}BufVars[8] = {{dep_name}}BufVars[9] - {{dep_name}}BufVars[11]
  if ({{dep_name}}BufVars[7] < ({{dep_name}}BufVars[2] + {{dep_name}}BufVars[6])):
    {{dep_name}}BufVars[2] = 0
    {{dep_name}}BufVars[10] = 0
  {{dep_name}}BufVars[3] = 0
  {{dep_name}}BufVars[11] = 0  
  # printf("module 3 : %u %u %u %u %u %u %u %u  \n", {{dep_name}}BufVars[0], {{dep_name}}BufVars[1], {{dep_name}}BufVars[2], {{dep_name}}BufVars[3], {{dep_name}}BufVars[4], {{dep_name}}BufVars[5], {{dep_name}}BufVars[6], {{dep_name}}BufVars[7])

{%for i in range(dep_val[0]) %}
  sem_post(&pSigSems[{{dep_val[1]}}])
{%endfor%}
{%endfor%}
  atomic_thread_fence(memory_order_seq_cst)
  sem_post(&pTickDownSems[{{non_source_num}}])
  #clock_gettime(CLOCK_MONOTONIC_RAW, &ts)
  #printf("tick %lu, module {{name}} done at %f.\n", pNumTicks[0], ts.tv_nsec/1000000.)

{% endblock %}
