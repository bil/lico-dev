#define _GNU_SOURCE
{%- if parport_tick_addr is not none %}
#include <linux/parport.h>
#include <linux/ppdev.h>
{%- endif %}
#include <errno.h>
#include <fcntl.h>
#include <sched.h>
#include <semaphore.h>
#include <signal.h>
#include <stdatomic.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/io.h>
#include <sys/ioctl.h>
#include <sys/mman.h>
#include <sys/resource.h>
#include <sys/stat.h>
#include <sys/time.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <time.h>
#include <unistd.h>

#include "constants.h"
#include "utilityFunctions.h"

#define TOPO_HEIGHT {{topo_height}}
#define NUM_SOURCES {{num_sources}}
#define NUM_SINKS {{num_sinks}}
#define NUM_MODULES {{num_modules}}

{% set test_start_time = ('test_start_time' in config['config'] and config['config']['test_start_time']) %}
{% set test_tick_time = ('test_tick_time' in config['config'] and config['config']['test_tick_time']) %}
{%- if num_modules != 0 %}
static char moduleProcnames[NUM_MODULES][MAX_MODULE_NAME_LEN] = {{'{'}}{% for n in module_names[:-1] %}"{{n}}", {% endfor %}"{{module_names[-1]}}"{{'}'}};
{%- endif %}
{%- if num_non_sources %}
static char nonSourceProcnames[NUM_NON_SOURCES][MAX_MODULE_NAME_LEN] = {{'{'}}{% for n in non_source_names[:-1] %}"{{n}}", {% endfor %}"{{non_source_names[-1]}}"{{'}'}};
{%- endif %}
{%- if topo_height != 0 %}
static int moduleTopoLens[TOPO_HEIGHT] = {{'{'}}{% for l in topo_widths[:-1] %}{{l}}, {% endfor %}{{topo_widths[-1]}}{{'}'}};
static int moduleTopoOrder[TOPO_HEIGHT][{{topo_max_width}}];
{%- endif %}
static int nonSourceModuleCheck[NUM_NON_SOURCES] = {{'{'}}{% for i in non_source_module_check[:-1] %}{{i}}, {% endfor %}{{non_source_module_check[-1]}}{{'}'}};
// child process IDs
static pid_t so_pids[NUM_SOURCES];
static pid_t ar_pids[NUM_ASYNC_READERS];
static pid_t si_pids[NUM_SINKS];
// numbered according to the index of the child's name in moduleProcnames
static pid_t ch_pids[NUM_MODULES];

{%- if parport_tick_addr is not none %}
int parportfd, parportRet, parportMode;
static unsigned char outVal = 0;
{%- endif %}

// pointer to start of shared memory
static size_t shm_size;
static uint8_t *pmem;
// global tick counter
static int64_t *pNumTicks;
// TODO figure out better synch
// source buffer offset update synchronization semaphore
static sem_t *pSourceUpSem;
static sem_t *pSourceDownSem;
// per-process tick start semaphore
// timer signals each proces by upping this semaphore
static sem_t *pTickUpSems;
// per-process computation end semaphore
// porcess signals timer by upping this semaphore
static sem_t *pTickDownSems;
// signal semaphores. synchronizes process hierarchy during runtime 
static sem_t *pSigSems;

static uint32_t *pBufVars;

sigset_t exitMask;
static sigset_t alrmMask;

static int sigalrm_recv;
static int sigexit_recv;
static int sigchld_recv;

// static int num_cores = {{num_cores}};
static size_t ex_i, al_i, de_i, m_i;
{%- if topo_height != 0 -%} 
static int m_j;
{%- endif %}

static struct itimerval rtTimer;
{%- if test_start_time %}
static struct timespec startTimer;
static time_t startStartSec;
static long startStartNSec;
{%- endif %}
{%- if test_tick_time %}
static struct timespec tickTimer;
static time_t tickStartSec;
static long tickStartNSec;
static unsigned long long tickTimeSum = 0;
static unsigned long numTicksMeasured = 0;
{%- endif %}

// INSERTED
//static struct timespec record_timer;
//static long curTime;
//static time_t curSec;
//static FILE *f;

void handle_exit(int exitStatus) {
{%- if test_tick_time %}
  printf("%llu time over %lu ticks\n", tickTimeSum, numTicksMeasured);
  printf("%f ns\n", ((float)tickTimeSum) / numTicksMeasured); 
{%- endif %}
  rtTimer.it_value.tv_sec = 0;
  rtTimer.it_value.tv_usec = 0;
  rtTimer.it_interval.tv_sec = 0;
  rtTimer.it_interval.tv_usec = 0;
  setitimer(ITIMER_REAL, &rtTimer, NULL);
  printf("exiting...\n");
  printf("Killing sinks...\n");
  for (ex_i = 0; ex_i < NUM_SINKS; ex_i++) {
    if (si_pids[ex_i] != -1) {
      printf("Killing sink: %d\n", si_pids[ex_i]);
      kill(si_pids[ex_i], SIGUSR1); // children already receive SIGUSR1
      while (waitpid(si_pids[ex_i], 0, WNOHANG) > 0);
    }
  }
  printf("Killing modules...\n");
  for (ex_i = 0; ex_i < NUM_MODULES; ex_i++) {
    if (ch_pids[ex_i] != -1) {
      printf("Killing module: %d\n", ch_pids[ex_i]);
      kill(ch_pids[ex_i], SIGUSR1); // children already receive SIGUSR1
      while (waitpid(ch_pids[ex_i], 0, WNOHANG) > 0);
    }
  }
  printf("Killing sources...\n");
  for (ex_i = 0; ex_i < NUM_SOURCES; ex_i++) {
    if (so_pids[ex_i] != -1) {
      printf("Killing source: %d\n", so_pids[ex_i]);
      kill(so_pids[ex_i], SIGUSR1); // children already receive SIGUSR1
      //while (waitpid(so_pids[ex_i], 0, WNOHANG) > 0);
      while(waitpid(so_pids[ex_i], 0, WNOHANG) > 0){
        printf("waiting for pid: %d\n", so_pids[ex_i]);
        fflush(stdout);
      }
    }
  }
  printf("Killing async readers...\n");
  fflush(stdout);
  for (ex_i = 0; ex_i < NUM_ASYNC_READERS; ex_i++) {
    if (ar_pids[ex_i] != -1) {
      printf("Killing async reader: %d\n", ar_pids[ex_i]);
      fflush(stdout);
      kill(ar_pids[ex_i], SIGINT);
      kill(ar_pids[ex_i], SIGUSR1); // children already receive SIGUSR1
      while(waitpid(ar_pids[ex_i], 0, WNOHANG) > 0){
        printf("waiting for pid: %d\n", ar_pids[ex_i]);
        fflush(stdout);
      }
    }
  }

  {%- if parport_tick_addr is not none %} 
    parportRet = ioctl(parportfd,PPRELEASE);
    close(parportfd);
  {%- endif %}

  printf("Unmapping shared memory...\n");
  printf("LiCoRICE ran for %ld ticks.\n", *pNumTicks);
  // close shared memory
  munmap(pmem, shm_size);
  shm_unlink(SMEM0_PATHNAME);
  munlockall();
  exit(exitStatus);
}

void set_sched_prior_low(int priority) {
  struct sched_param param;
  param.sched_priority = priority;
  if (sched_setscheduler(0, SCHED_OTHER, &param) == -1) {
    die("sched_setscheduler failed.\n");
  }
}


static void check_children() {
{%- if test_tick_time %}
  clock_gettime(CLOCK_MONOTONIC_RAW, &tickTimer);
  printf("tick %li began at %f.\n", (*pNumTicks)+1, tickTimer.tv_nsec/1000000.);
{% endif %}
{%- if parport_tick_addr is not none %}
  // flip bits and output to parallel port
  if ((parportRet = ioctl(parportfd, PPWDATA, &outVal)) == -1) {
    die("parport ioctl failed,\n");
  }
  outVal = ~outVal;
{%- endif %}
  
  // printf("TIMER tick %ld\n", *pNumTicks);
  if ((sigalrm_recv > 1))
    die("Timer missed a tick. (>1 unhandled sigalrms)");

{%- if test_tick_time %}
  tickStartNSec = tickTimer.tv_nsec;
  tickStartSec = tickTimer.tv_sec;
{%- endif %}
  
  // increment SIGALRM counter
  (*pNumTicks)++;

{%- if config["config"]["num_ticks"] != -1 %}
  if (*pNumTicks > {{config["config"]["num_ticks"]}}) {
    (*pNumTicks)--;
    handle_exit(0);
  }
{%- endif %}
  
  // only trigger sources on first iterations
  if (*pNumTicks < 0) {
    for (al_i = 0; al_i < NUM_SOURCES; al_i++) 
      sem_wait(pSourceDownSem);

    for (al_i = 0; al_i < NUM_SOURCES; al_i++)
      sem_post(pSourceUpSem);    
  }
  
  // normal behavior on subsequent iterations
  else {
  {%- if num_non_sources %}
    // check if modules have finished execution in allotted time (could just check last round, but need to properly figure val topo stuff again)
    for (al_i = 0; al_i < NUM_NON_SOURCES; al_i++) {
      if (sem_trywait(pTickDownSems + al_i)) {
        if (nonSourceModuleCheck[al_i]) {
          printf("Module timing violation on ms: %lu from module %s\n", *pNumTicks, nonSourceProcnames[al_i]);
          die("Module timing violation.\n");
        }
        else {
          printf("Sink timing violation on ms: %lu from sink %s\n", *pNumTicks, nonSourceProcnames[al_i]);
        }
      } 
    }
  {%- endif %}

    for (al_i = 0; al_i < NUM_SOURCES; al_i++)
      sem_wait(pSourceDownSem);
  
    for (al_i = 0; al_i < NUM_SOURCES; al_i++)
      sem_post(pSourceUpSem);

    {%- if num_non_sources %}
    // trigger all non-source processes
    for (al_i = 0; al_i < NUM_NON_SOURCES; al_i++) {
      sem_post(pTickUpSems + al_i);
    }
    {%- endif %}
  }

{%- if test_tick_time %}
  clock_gettime(CLOCK_MONOTONIC_RAW, &tickTimer);
  numTicksMeasured++;
  tickTimeSum += ((tickTimer.tv_sec - tickStartSec) * 1000000000 + (tickTimer.tv_nsec - tickStartNSec));
  if (numTicksMeasured >= 1000 * 60 * 60) {
    handle_exit(0);
  }
{%- endif %}

  sigalrm_recv--;
}

// Handle SIGALRM on tick start
void event_handler(int signum) {
  sigalrm_recv++;
}

void exit_handler(int signum) {
  sigexit_recv++;
}

void usr1_handler(int signum) {
  //do nothing, this sig is just used for communication
}

void usr2_handler(int signum) {
  //do nothing, this sig is just used for communication
}

void dead_child() {
  --sigchld_recv;
  int saved_errno = errno;
  int dead_pid;
  while ((dead_pid = waitpid((pid_t)(-1), 0, WNOHANG)) == 0);
  printf("dead pid: %d \n", dead_pid);
  for (de_i = 0; de_i < NUM_SINKS; de_i++) {   
    if (si_pids[de_i] == dead_pid) {
      si_pids[de_i] = -1;
    }
  }
  for (de_i = 0; de_i < NUM_SINKS; de_i++) {   
    if (so_pids[de_i] == dead_pid) {
      so_pids[de_i] = -1;
    }
  }
  for (de_i = 0; de_i < NUM_MODULES; de_i++) {
    if (ch_pids[de_i] == dead_pid) {
      ch_pids[de_i] = -1;
    }
  }

  errno = saved_errno;
  die("I have lost a child :( \n");
}

void chld_handler(int sig) {
  sigchld_recv++;
}

void interrupt_handler(int sig){
  printf("received interrupted system call error\n");
}

/*
 * Timer parent main
 */
int main(int argc, char* argv[]) {
{%- if test_start_time %}
  clock_gettime(CLOCK_MONOTONIC_RAW, &startTimer);
  startStartSec = startTimer.tv_sec;
  startStartNSec = startTimer.tv_nsec;
{%- endif %}

{%- if parport_tick_addr is not none %}

  // make sure parport is writeable
  if ((parportfd = open("/dev/parport{{parport_tick_addr}}", O_RDWR)) == -1) {
    die("parport open\n");
  }
  if ((parportRet = ioctl(parportfd,PPCLAIM))) {
    die("ioctl PPCLAIM\n");
  }

  parportMode = IEEE1284_MODE_COMPAT;
  if ((parportRet = ioctl(parportfd,PPNEGOT,&parportMode)) == -1) /* 0 on success, -1 on failure */ {
    die("ioctl PPNEGOT\n");
  }
{%- endif %}

  // set signal masks
  sigemptyset(&exitMask);
  sigaddset(&exitMask, SIGALRM);  
  sigfillset(&alrmMask);
  // sigdelset(&alrmMask, SIGINT);
  // initialize utilityFunctions
  init_utils(&handle_exit, &exitMask);

  // set signal handlers
  set_sighandler(SIGINT, &exit_handler, &exitMask);
  set_sighandler(SIGALRM, &event_handler, &alrmMask);
  set_sighandler(SIGUSR1, &usr1_handler, NULL);
  set_sighandler(SIGUSR2, &usr2_handler, NULL);
  set_sighandler(SIGCHLD, &chld_handler, NULL);
  // set_sighandler(SIGINT, interrupt_handler, NULL);
  printf("Handlers installed.\n");

  // create shared memory and map it
  printf("Mapping memory...\n");

  // TODO pmem offsets should be constants, or store in struct
  shm_size = ROUND_UP(SHM_SIZE, PAGESIZE);
  open_shared_mem(&pmem, SMEM0_PATHNAME, shm_size, O_TRUNC | O_CREAT | O_RDWR, PROT_READ | PROT_WRITE);
  pNumTicks = (int64_t *)(pmem + NUM_TICKS_OFFSET);
  pSourceUpSem = (sem_t *)(pmem + SOURCE_UP_SEM_OFFSET);
  pSourceDownSem = (sem_t *)(pmem + SOURCE_DOWN_SEM_OFFSET);
  pTickUpSems = (sem_t *)(pmem + TICK_UP_SEMS_OFFSET);
  pTickDownSems = (sem_t *)(pmem + TICK_DOWN_SEMS_OFFSET);
  pSigSems = (sem_t *)(pmem + SIG_SEMS_OFFSET);
  pBufVars = (uint32_t *)(pmem + BUF_VARS_OFFSET);

  *pNumTicks = -1 * INIT_BUFFER_TICKS;

  // initialize source semaphore
  sem_init(pSourceUpSem, 1, 0);
  sem_init(pSourceDownSem, 1, NUM_SOURCES); 

  // initialize up tick semaphores
  for (m_i = 0; m_i < NUM_NON_SOURCES; m_i++) {
    sem_init(pTickUpSems + m_i, 1, 0);
  }

  // initialize down tick semaphores
  for (m_i = 0; m_i < NUM_NON_SOURCES; m_i++) {
    sem_init(pTickDownSems + m_i, 1, 1);
  }

  // initialize signal semaphores
  for (m_i = 0; m_i < NUM_SEM_SIGS; m_i++) {
    sem_init(pSigSems + m_i, 1, 0);
  }

  printf("Memory mapped.\nForking children...\n");
  
  // set priority
  set_sched_prior(PRIORITY);
  // cpu_set_t mask;
  //CPU_ZERO(&mask);
  //CPU_SET(1, &mask);
  //sched_setaffinity(0, sizeof(cpu_set_t), &mask);


{% for name in source_names -%} // TODO write this loop in C
  // fork and exec source process
  if ((so_pids[{{loop.index0}}] = fork()) == -1) {
    die("fork failed \n");
  }
  if (so_pids[{{loop.index0}}] == 0) { // only runs for source process
    cpu_set_t mask;
    // for (int i = 2; i < num_cores - 1; i++) { // leave one core for system (core num_cores-1)
    //   CPU_SET(i, &mask);
    // }
    CPU_ZERO(&mask);
    CPU_SET(NETWORK_CPU, &mask);
    sched_setaffinity(0, sizeof(cpu_set_t), &mask);
    setpriority(PRIO_PROCESS, 0, -19);
    set_sched_prior(PRIORITY);
    char* argv[2] = {"./{{name}}", NULL};
    
    // execute source process
    // signal handlers and mmap are not preserved on exec
    execvp(argv[0],argv);
    printf("source exec error. %s \n", strerror(errno));
    exit(1);
    //in case execvp fails
  }
  pause();
{%- endfor %}
  printf("Sources ready.\n");
{%- for name in source_names %}
  printf("{{name}}: %d\n", so_pids[{{loop.index0}}]);
{%- endfor %}


{% for name in async_reader_names -%} // TODO write this loop in C
  // fork and exec reader process
  if ((ar_pids[{{loop.index0}}] = fork()) == -1) {
    die("fork failed \n");
  }
  if (ar_pids[{{loop.index0}}] == 0) { // only runs for reader process
    // cpu_set_t mask;
    // for (int i = 2; i < num_cores - 1; i++) { // leave one core for system (core num_cores-1)
    //   CPU_SET(i, &mask);
    // }
    // CPU_ZERO(&mask);
    // CPU_SET(NETWORK_CPU, &mask);
    // sched_setaffinity(0, sizeof(cpu_set_t), &mask);
    setpriority(PRIO_PROCESS, 0, -19);
    set_sched_prior(PRIORITY - 1);
    char* argv[2] = {"./{{name}}", NULL};
    
    // execute reader process
    // signal handlers and mmap are not preserved on exec
    execvp(argv[0],argv);
    printf("async reader exec error. %s \n", strerror(errno));
    exit(1);
    //in case execvp fails
  }
  pause();
{%- endfor %}
{%- if num_async_readers > 0 %}
  printf("Async readers ready.\n");
{%- endif %}
{%- for name in async_reader_names %}
  printf("{{name}}: %d\n", ar_pids[{{loop.index0}}]);
{%- endfor %}


{% if num_modules != 0 %}
  // fork and exec child processes
{%- for i in range(0, topo_height) %}
{%- for j in range(0, topo_widths[i]) %}
  moduleTopoOrder[{{i}}][{{j}}] = {{topo_order[i][j]}};
{%- endfor %}
{%- endfor %}
  
  for (m_i = 0; m_i < TOPO_HEIGHT; m_i++) {
    for (m_j = 0; m_j < moduleTopoLens[m_i]; m_j++) {
      int childNum = moduleTopoOrder[m_i][m_j];
      if ((ch_pids[childNum] = fork()) == -1) {
        die("fork failed\n");
      }
      if (ch_pids[childNum] == 0) {  // only runs for child processes
        // cpu_set_t mask;
        //CPU_ZERO(&mask);
        //CPU_SET(m_j + CPU_OFFSET, &mask);
        //sched_setaffinity(0, sizeof(cpu_set_t), &mask);
        setpriority(PRIO_PROCESS, 0, -19);
        set_sched_prior(PRIORITY);
        char procBuf[64];
        sprintf(procBuf, "./%s", moduleProcnames[childNum]);
        char* argv[2] = {procBuf, NULL};

        // execute child process
        // signal handlers and mmap are not preserved on exec
        execvp(argv[0],argv);
        printf("child exec error. %s \n", strerror(errno));
        exit(1);
        //in case execvp fails
      }
      pause();
    }
  }
  printf("Internal modules ready.\n");

for (m_i = 0; m_i < TOPO_HEIGHT; m_i++) {
  printf("%s: %d\n", moduleProcnames[m_i], ch_pids[m_i]);
}
{%- endif %}

{% for name in sink_names -%}  // TODO write this loop in C
  // fork and exec data logger process
  if ((si_pids[{{loop.index0}}] = fork()) == -1) {
    die("fork failed \n");
  }
  if (si_pids[{{loop.index0}}] == 0) { // only runs for logger process
    cpu_set_t mask;
    // for (int i = 1; i < num_cores - 1; i++) { // leave one core for system (core num_cores-1)
    //   CPU_SET(i, &mask);
    // }
    //CPU_ZERO(&mask);
    //CPU_SET(LOGGER_CPU, &mask);
    //sched_setaffinity(0, sizeof(cpu_set_t), &mask);
    setpriority(PRIO_PROCESS, 0, -2);
    set_sched_prior_low(0);
    char* argv[2] = {"./{{name}}", NULL};
    
    // execute sink process
    // signal handlers and mmap are not preserved on exec
    execvp(argv[0],argv);
    printf("logger exec error. %s \n", strerror(errno));
    exit(1);
    //in case execvp fails
  }
  pause();
{%- endfor %}
  printf("Sinks ready.\n");
{% for name in sink_names -%}
  printf("{{name}}: %d\n", si_pids[{{loop.index0}}]);
{% endfor %}

  make_realtime();

  for (m_i = 0; m_i < NUM_ASYNC_READERS; m_i++) {
    kill(ar_pids[m_i], SIGUSR2);
  }
  for (m_i = 0; m_i < NUM_SOURCES; m_i++) {
    kill(so_pids[m_i], SIGUSR2);
  }
  printf("Sources signaled.\n");

{%- if test_start_time %}
  clock_gettime(CLOCK_MONOTONIC_RAW, &startTimer);
  printf("Start Time: %ld\n", (startTimer.tv_sec - startStartSec) * 1000000000 + startTimer.tv_nsec - startStartNSec);
  handle_exit(0);
{% endif %}

  // set up timer
  printf("Setting up timer...\n");
  fflush(stdout);

  rtTimer.it_value.tv_sec = SECREQ;
  rtTimer.it_value.tv_usec = USECREQ;
  rtTimer.it_interval.tv_sec = SECREQ;
  rtTimer.it_interval.tv_usec = USECREQ;
  setitimer(ITIMER_REAL, &rtTimer, NULL);

  while(1) {
    if (sigexit_recv)
      handle_exit(0);
    if (sigchld_recv)
      dead_child();
    if (sigalrm_recv)
      check_children();
    pause();
  }
}
